;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                             Senal's emacs configuration
;;                             AI Included
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Disable startup screen
(setq inhibit-startup-message t)

;; Turn off toolbar, scrollbar, and menu bar
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

;; Enable line numbers
(global-display-line-numbers-mode t)

;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)
(setq-default tab-width 8)

;; Set default font (with fallback)
(if (member "Monaco" (font-family-list))
  (set-face-attribute 'default nil :font "Monaco-12")
  (set-face-attribute 'default nil :font "Menlo-12"))

;; Enable package management
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)

;; Refresh package contents if needed
(unless package-archive-contents
  (package-refresh-contents))

;; Install use-package if not present
(unless (package-installed-p 'use-package)
  (condition-case err
                  (package-install 'use-package)
                  (error (message "Failed to install use-package: %s" err))))

(require 'use-package)
(setq use-package-always-ensure t)

;; Which-Key
(use-package which-key
             :init (which-key-mode)
             :config (setq which-key-idle-delay 0.5))

;; Evil Mode
(use-package evil
             :init
             (setq evil-want-integration t)
             (setq evil-want-keybinding nil)
             :config
             (evil-mode 1))

;; Evil Collection
(use-package evil-collection
             :after evil
             :config
             (evil-collection-init))

;; Additional useful packages
(use-package magit
             :commands magit-status)

(use-package projectile
             :init (projectile-mode +1)
             :config (setq projectile-completion-system 'ivy))

(use-package ivy
             :init (ivy-mode 1)
             :config (setq ivy-use-virtual-buffers t))

(use-package counsel
             :after ivy
             :init (counsel-mode 1))

;; Theme and appearance
;; this is optional to disable and enable.
;; soon custom theme will be created
(use-package doom-themes
             :config
             (load-theme 'doom-one t))

;; Modeline
(use-package doom-modeline
             :init (doom-modeline-mode 1))

;; Auto-completion
(use-package company
             :init (global-company-mode)
             :config (setq company-idle-delay 0.1))

;; Syntax checking
(use-package flycheck
             :init (global-flycheck-mode))

;; Git integration
(use-package git-gutter
             :init (global-git-gutter-mode))

;; Better search
(use-package swiper
             :after ivy
             :bind (("C-s" . swiper)
                    ("C-r" . swiper)))

;; Org mode enhancements
(use-package org
             :config
             (setq org-startup-indented t)
             (setq org-hide-emphasis-markers t))

;; Custom settings - these will be auto-generated by Emacs
;; and should not be edited manually
